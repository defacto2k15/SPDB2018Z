{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\src\\components\\GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\src\\components\\GoogleMap.vue","mtime":1545517428714},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  components: { AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map\r\n    })\r\n    this.geolocate()\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    setPlace (place) {\r\n      this.currentPlace = place\r\n    },\r\n    addMarker () {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        }\r\n        this.markers.push({ position: marker })\r\n        this.places.push(this.currentPlace)\r\n        this.center = marker\r\n        this.currentPlace = null\r\n      }\r\n    },\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    setStartMarker: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.startMarker.location = {\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      }\r\n      this.center = this.startMarker.location\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.endMarker.location = {\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      }\r\n      this.center = this.endMarker.location\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.startMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\r\n      this.startPlaceId = null\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.endMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\r\n      this.endPlaceId = null\r\n    },\r\n    onResults (results) {\r\n      alert(results)\r\n      if (results) {\r\n        this.placeLocation = results.geometry.location\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GoogleMap.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n  <div class=\"map\">\r\n    <div>\r\n      <h2>Search and add a pin</h2>\r\n      <label> Start point:\r\n        <gmap-autocomplete @place_changed=\"setStartMarker\" placeholder=\"Set start position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <label> End point:\r\n        <gmap-autocomplete @place_changed=\"setEndMarker\" aria-placeholder=\"Set end position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <br/>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"startPlaceId\" title=\"Start\"></PlaceDescription>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"endPlaceId\" title=\"End\"></PlaceDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"startMarker.location\" title=\"StartPosition\" ></AddressDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"endMarker.location\" title=\"EndPosition\" ></AddressDescription>\r\n      <div id=\"terminalMarkerDescription\">\r\n        <div id=\"startMarkerDescription\">\r\n\r\n        </div>\r\n        <div id=\"endMarkerDescription\">\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <gmap-map id=\"VueGoogleMap\" ref=\"mapRef\"\r\n      :center=\"center\"\r\n      :zoom=\"12\"\r\n      style=\"width:100%;  height: 400px;\"\r\n    >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in markers\"\r\n        :position=\"m.position\"\r\n        :clickable=\"true\"\r\n        :draggable=\"true\"\r\n        @click=\"center=m.position\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"startMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"start\"\r\n        :draggable=\"true\"\r\n        @click=\"center=startMarker.location\"\r\n        @dragend=\"updateStartPosition\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"endMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"end\"\r\n        :draggable=\"true\"\r\n        @click=\"center=endMarker.location\"\r\n        @dragend=\"updateEndPosition\"\r\n      ></gmap-marker>\r\n    </gmap-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  components: { AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map\r\n    })\r\n    this.geolocate()\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    setPlace (place) {\r\n      this.currentPlace = place\r\n    },\r\n    addMarker () {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        }\r\n        this.markers.push({ position: marker })\r\n        this.places.push(this.currentPlace)\r\n        this.center = marker\r\n        this.currentPlace = null\r\n      }\r\n    },\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    setStartMarker: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.startMarker.location = {\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      }\r\n      this.center = this.startMarker.location\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.endMarker.location = {\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      }\r\n      this.center = this.endMarker.location\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.startMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\r\n      this.startPlaceId = null\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.endMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\r\n      this.endPlaceId = null\r\n    },\r\n    onResults (results) {\r\n      alert(results)\r\n      if (results) {\r\n        this.placeLocation = results.geometry.location\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}