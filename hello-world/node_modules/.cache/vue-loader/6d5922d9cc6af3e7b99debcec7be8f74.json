{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\src\\components\\GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\src\\components\\GoogleMap.vue","mtime":1545430000671},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startPosition: null,\r\n      endPosition: null,\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.geolocate()\r\n  },\r\n\r\n  methods: {\r\n    // receives a place object via the autocomplete component\r\n    setPlace (place) {\r\n      debugger;\r\n      this.currentPlace = place\r\n    },\r\n    addMarker () {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        }\r\n        this.markers.push({ position: marker })\r\n        this.places.push(this.currentPlace)\r\n        this.center = marker\r\n        this.currentPlace = null\r\n      }\r\n    },\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    pinDragged: function(location){\r\n      console.log(\"AAA\")\r\n    },\r\n    setStartMarker: function(location){\r\n      this.startPosition = location\r\n    },\r\n    setEndMarker: function(location){\r\n      this.endPosition = location\r\n    },\r\n  }\r\n}\r\n",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GoogleMap.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n  <div class=\"map\">\r\n    <div>\r\n      <h2>Search and add a pin</h2>\r\n      <label> Start point:\r\n        <gmap-autocomplete @place_changed=\"setPlace\">\r\n        </gmap-autocomplete>\r\n        <button @click=\"setStartMarker\">Add</button>\r\n      </label>\r\n      <label> End point:\r\n        <gmap-autocomplete @place_changed=\"setPlace\">\r\n        </gmap-autocomplete>\r\n        <button @click=\"setEndMarker\">Add</button>\r\n      </label>\r\n      <br/>\r\n\r\n    </div>\r\n    <br>\r\n    <gmap-map\r\n      :center=\"center\"\r\n      :zoom=\"12\"\r\n      style=\"width:100%;  height: 400px;\"\r\n    >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in markers\"\r\n        :position=\"m.position\"\r\n        :clickable=\"true\"\r\n        :draggable=\"true\"\r\n        @click=\"center=m.position\"\r\n        @drag=\"pinDragged\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"startPosition\"\r\n        :clickable=\"true\"\r\n        :label=\"start\"\r\n        :draggable=\"true\"\r\n        @click=\"center=startPosition\"\r\n        @drag=\"pinDragged\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"endPosition\"\r\n        :clickable=\"true\"\r\n        :label=\"end\"\r\n        :draggable=\"true\"\r\n        @click=\"center=endPosition\"\r\n        @drag=\"pinDragged\"\r\n      ></gmap-marker>\r\n    </gmap-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'GoogleMap',\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startPosition: null,\r\n      endPosition: null,\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.geolocate()\r\n  },\r\n\r\n  methods: {\r\n    // receives a place object via the autocomplete component\r\n    setPlace (place) {\r\n      debugger;\r\n      this.currentPlace = place\r\n    },\r\n    addMarker () {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        }\r\n        this.markers.push({ position: marker })\r\n        this.places.push(this.currentPlace)\r\n        this.center = marker\r\n        this.currentPlace = null\r\n      }\r\n    },\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    pinDragged: function(location){\r\n      console.log(\"AAA\")\r\n    },\r\n    setStartMarker: function(location){\r\n      this.startPosition = location\r\n    },\r\n    setEndMarker: function(location){\r\n      this.endPosition = location\r\n    },\r\n  }\r\n}\r\n</script>\r\n"]}]}