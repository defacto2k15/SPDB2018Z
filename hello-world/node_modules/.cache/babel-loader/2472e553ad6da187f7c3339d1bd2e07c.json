{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\babel-loader\\lib\\index.js!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\src\\components\\GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\src\\components\\GoogleMap.vue","mtime":1545517428714},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\vueApp\\hello-world\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PlaceDescription from './PlaceDescription';\nimport AddressDescription from './AddressDescription';\nexport default {\n  name: 'GoogleMap',\n  components: {\n    AddressDescription: AddressDescription,\n    PlaceDescription: PlaceDescription\n  },\n  data: function data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: {\n        lat: 45.508,\n        lng: -73.587\n      },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      startMarker: {\n        location: null,\n        description: null\n      },\n      endMarker: {\n        location: null,\n        description: null\n      },\n      mapObject: null,\n      startPlaceId: null,\n      endPlaceId: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$refs.mapRef.$mapPromise.then(function (map) {\n      _this.mapObject = map;\n    });\n    this.geolocate();\n  },\n  methods: {\n    empty: function empty() {},\n    // receives a place object via the autocomplete component\n    setPlace: function setPlace(place) {\n      this.currentPlace = place;\n    },\n    addMarker: function addMarker() {\n      if (this.currentPlace) {\n        var marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({\n          position: marker\n        });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    geolocate: function geolocate() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n    setStartMarker: function setStartMarker(location) {\n      this.startPlaceId = location.place_id;\n      this.startMarker.location = {\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      };\n      this.center = this.startMarker.location;\n    },\n    setEndMarker: function setEndMarker(location) {\n      this.endPlaceId = location.place_id;\n      this.endMarker.location = {\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      };\n      this.center = this.endMarker.location;\n    },\n    updateStartPosition: function updateStartPosition(location) {\n      this.startMarker.location = {\n        lat: location.latLng.lat(),\n        lng: location.latLng.lng()\n      };\n      this.startPlaceId = null;\n    },\n    updateEndPosition: function updateEndPosition(location) {\n      this.endMarker.location = {\n        lat: location.latLng.lat(),\n        lng: location.latLng.lng()\n      };\n      this.endPlaceId = null;\n    },\n    onResults: function onResults(results) {\n      alert(results);\n\n      if (results) {\n        this.placeLocation = results.geometry.location;\n      }\n    }\n  }\n};",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"map\">\r\n    <div>\r\n      <h2>Search and add a pin</h2>\r\n      <label> Start point:\r\n        <gmap-autocomplete @place_changed=\"setStartMarker\" placeholder=\"Set start position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <label> End point:\r\n        <gmap-autocomplete @place_changed=\"setEndMarker\" aria-placeholder=\"Set end position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <br/>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"startPlaceId\" title=\"Start\"></PlaceDescription>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"endPlaceId\" title=\"End\"></PlaceDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"startMarker.location\" title=\"StartPosition\" ></AddressDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"endMarker.location\" title=\"EndPosition\" ></AddressDescription>\r\n      <div id=\"terminalMarkerDescription\">\r\n        <div id=\"startMarkerDescription\">\r\n\r\n        </div>\r\n        <div id=\"endMarkerDescription\">\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <gmap-map id=\"VueGoogleMap\" ref=\"mapRef\"\r\n      :center=\"center\"\r\n      :zoom=\"12\"\r\n      style=\"width:100%;  height: 400px;\"\r\n    >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in markers\"\r\n        :position=\"m.position\"\r\n        :clickable=\"true\"\r\n        :draggable=\"true\"\r\n        @click=\"center=m.position\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"startMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"start\"\r\n        :draggable=\"true\"\r\n        @click=\"center=startMarker.location\"\r\n        @dragend=\"updateStartPosition\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"endMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"end\"\r\n        :draggable=\"true\"\r\n        @click=\"center=endMarker.location\"\r\n        @dragend=\"updateEndPosition\"\r\n      ></gmap-marker>\r\n    </gmap-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  components: { AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map\r\n    })\r\n    this.geolocate()\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    setPlace (place) {\r\n      this.currentPlace = place\r\n    },\r\n    addMarker () {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        }\r\n        this.markers.push({ position: marker })\r\n        this.places.push(this.currentPlace)\r\n        this.center = marker\r\n        this.currentPlace = null\r\n      }\r\n    },\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    setStartMarker: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.startMarker.location = {\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      }\r\n      this.center = this.startMarker.location\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.endMarker.location = {\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      }\r\n      this.center = this.endMarker.location\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.startMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\r\n      this.startPlaceId = null\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.endMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\r\n      this.endPlaceId = null\r\n    },\r\n    onResults (results) {\r\n      alert(results)\r\n      if (results) {\r\n        this.placeLocation = results.geometry.location\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src\\components"}]}