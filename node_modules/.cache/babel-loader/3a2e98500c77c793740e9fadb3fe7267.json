{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\thread-loader\\dist\\cjs.js!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\babel-loader\\lib\\index.js!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\GoogleMap.vue","mtime":1547792511719},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\package.json","mtime":1547792597100},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PlaceDescription from './PlaceDescription';\nimport AddressDescription from './AddressDescription';\nimport PlaceInfoBox from \"./PlaceInfoBox\";\nexport default {\n  name: 'GoogleMap',\n  props: [\"pointsOfInterest\", \"routes\", \"global\"],\n  components: {\n    PlaceInfoBox: PlaceInfoBox,\n    AddressDescription: AddressDescription,\n    PlaceDescription: PlaceDescription\n  },\n  data: function data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: {\n        lat: 45.508,\n        lng: -73.587\n      },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      startMarker: {\n        location: null,\n        description: null\n      },\n      endMarker: {\n        location: null,\n        description: null\n      },\n      mapObject: null,\n      startPlaceId: null,\n      endPlaceId: null,\n      path: [],\n      infoWindowPos: null,\n      infoWinOpen: false,\n      infoOptions: {\n        pixelOffset: {\n          width: 0,\n          height: -35\n        }\n      },\n      proposedInterestingPlaces: [\"ChIJv0QRf_HMHkcRv7d7R28ht3Q\"],\n      infoboxInterestingPlace: null,\n      polilineInterestingPathsField: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var vm = this;\n    this.$refs.mapRef.$mapPromise.then(function (map) {\n      _this.mapObject = map;\n      vm.global.map = map;\n\n      _this.calculateInterestingPlaces(_this.proposedInterestingPlaces);\n    });\n    this.geolocate();\n    this.$eventHub.$on('newRequest', function (response) {\n      console.log(\"Update!\");\n      vm.$forceUpdate();\n    });\n    this.$eventHub.$on('updateRoutes', function (routes) {\n      vm.routes = routes;\n      vm.polilineInterestingPathsField = vm.polilineInterestingPathsFunc();\n    });\n  },\n  computed: {\n    fastestPath: function fastestPath() {\n      var toReturn = [];\n\n      if (this.routes.fastestRoute) {\n        var decoded = google.maps.geometry.encoding.decodePath(this.routes.fastestRoute.travelObjects[0].overview_polyline.points);\n        decoded.forEach(function (d) {\n          toReturn.push({\n            lat: d.lat(),\n            lng: d.lng()\n          });\n        });\n      }\n\n      return toReturn;\n    },\n    polilineInterestingPaths: function polilineInterestingPaths() {\n      var toReturn = [];\n\n      if (this.routes.interestingRoute) {\n        this.routes.interestingRoute.travelObjects.forEach(function (c) {\n          var decoded = google.maps.geometry.encoding.decodePath(c.overview_polyline.points);\n          var thisLinePoints = [];\n          decoded.forEach(function (d) {\n            thisLinePoints.push({\n              lat: d.lat(),\n              lng: d.lng()\n            });\n          });\n          toReturn.push({\n            path: thisLinePoints,\n            color: c.color\n          });\n        });\n      }\n\n      return toReturn;\n    }\n  },\n  methods: {\n    empty: function empty() {},\n    // receives a place object via the autocomplete component\n    geolocate: function geolocate() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n    polilineInterestingPathsFunc: function polilineInterestingPathsFunc() {\n      var toReturn = [];\n\n      if (this.routes.interestingRoute) {\n        this.routes.interestingRoute.travelObjects.forEach(function (c) {\n          var decoded = google.maps.geometry.encoding.decodePath(c.overview_polyline.points);\n          var thisLinePoints = [];\n          decoded.forEach(function (d) {\n            thisLinePoints.push({\n              lat: d.lat(),\n              lng: d.lng()\n            });\n          });\n          toReturn.push({\n            path: thisLinePoints,\n            color: c.color\n          });\n        });\n      }\n\n      return toReturn;\n    },\n    setStartPosition: function setStartPosition(location) {\n      this.startPlaceId = location.place_id;\n      this.setStartMarker({\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      });\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      } else {\n        this.center = this.startMarker.location;\n      }\n    },\n    setEndPosition: function setEndPosition(location) {\n      this.endPlaceId = location.place_id;\n      this.setEndMarker({\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      });\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      } else {\n        this.center = this.endMarker.location;\n      }\n    },\n    updateStartPosition: function updateStartPosition(location) {\n      this.setStartMarker({\n        lat: location.latLng.lat(),\n        lng: location.latLng.lng()\n      });\n      this.startPlaceId = null;\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      }\n    },\n    updateEndPosition: function updateEndPosition(location) {\n      this.setEndMarker({\n        lat: location.latLng.lat(),\n        lng: location.latLng.lng()\n      });\n      this.endPlaceId = null;\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      }\n    },\n    setStartMarker: function setStartMarker(location) {\n      this.startMarker.location = location;\n      this.$eventHub.$emit('startPositionChange', this.startMarker.location);\n    },\n    setEndMarker: function setEndMarker(location) {\n      this.endMarker.location = location;\n      this.$eventHub.$emit('endPositionChange', this.endMarker.location);\n    },\n    fitBounds: function fitBounds() {\n      var b = new google.maps.LatLngBounds();\n      b.extend(this.startMarker.location);\n      b.extend(this.endMarker.location);\n      this.$refs.mapRef.fitBounds(b);\n    },\n    toggleInfoWindow: function toggleInfoWindow(position) {\n      this.infoWindowPos = position; //check if its the same marker that was selected if yes toggle\n      // if (this.currentMidx == idx) {\n      //   this.infoWinOpen = !this.infoWinOpen;\n      // }\n      //if different marker set infowindow to open and reset current marker index\n      // else {\n\n      this.infoWinOpen = true; // }\n    },\n    clickedInterestingPlaceMarker: function clickedInterestingPlaceMarker(place) {\n      this.infoboxInterestingPlace = place;\n      this.toggleInfoWindow(place.location);\n    },\n    calculateInterestingPlaces: function calculateInterestingPlaces(interestingPlacesIds) {\n      var map = this.mapObject;\n      var vm = this;\n      var service = new window.google.maps.places.PlacesService(map);\n      interestingPlacesIds.forEach(function (c) {\n        service.getDetails({\n          placeId: c\n        }, function (place, status) {\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            vm.pointsOfInterest.push({\n              location: {\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng()\n              },\n              place: place,\n              isInPlan: false\n            });\n          }\n        });\n      });\n    },\n    findPointOfInterestIcon: function findPointOfInterestIcon(place) {\n      if (place.isInPlan) {\n        return \"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\";\n      } else {\n        return 'http://fxprotect.com/wp-content/uploads/2017/03/marker-blue.png';\n      }\n    }\n  }\n};",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"map\">\r\n    <div>\r\n      <label>Miejsce startu:\r\n        <gmap-autocomplete @place_changed=\"setStartPosition\" placeholder=\"Set start position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <label>Miejsce końca:\r\n        <gmap-autocomplete @place_changed=\"setEndPosition\" aria-placeholder=\"Set end position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <br/>\r\n      <!--<PlaceDescription :map=\"mapObject\" :placeid=\"startPlaceId\" title=\"Start\"></PlaceDescription>-->\r\n      <!--<PlaceDescription :map=\"mapObject\" :placeid=\"endPlaceId\" title=\"End\"></PlaceDescription>-->\r\n      <AddressDescription :map=\"mapObject\" :location=\"startMarker.location\" title=\"Początek: \" ></AddressDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"endMarker.location\" title=\"Koniec: \" ></AddressDescription>\r\n      <div id=\"terminalMarkerDescription\">\r\n        <div id=\"startMarkerDescription\">\r\n        </div>\r\n        <div id=\"endMarkerDescription\">\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <gmap-map id=\"VueGoogleMap\" ref=\"mapRef\"\r\n      :center=\"center\"\r\n      :zoom=\"12\"\r\n    >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in markers\"\r\n        :position=\"m.position\"\r\n        :clickable=\"true\"\r\n        :draggable=\"true\"\r\n        @click=\"center=m.position\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"startMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"start\"\r\n        :draggable=\"true\"\r\n        @click=\"center=startMarker.location\"\r\n        @dragend=\"updateStartPosition\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"endMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"end\"\r\n        :draggable=\"true\"\r\n        @click=\"center=endMarker.location\"\r\n        @dragend=\"updateEndPosition\"\r\n      ></gmap-marker>\r\n\r\n      <gmap-marker v-for=\"(place, i) in routes.interestingPointsInRoute\"\r\n                   :position=\"place.location\"\r\n                   :clickable=\"true\"\r\n                   :label=\"i\"\r\n                   :draggable=\"false\"\r\n                   @click=\"clickedInterestingPlaceMarker(place)\"\r\n                   :icon=\"findPointOfInterestIcon(place)\"\r\n      ></gmap-marker>\r\n      <gmap-marker v-for=\"place in routes.interestingPointsNearRoute\"\r\n                   :position=\"place.location\"\r\n                   :clickable=\"true\"\r\n                   label=\"!\"\r\n                   :draggable=\"false\"\r\n                   @click=\"clickedInterestingPlaceMarker(place)\"\r\n                   :icon=\"findPointOfInterestIcon(place)\"\r\n      ></gmap-marker>\r\n\r\n      <gmap-info-window :options=\"infoOptions\" :position=\"infoWindowPos\" :opened=\"infoWinOpen\" @closeclick=\"infoWinOpen=false\">\r\n        <PlaceInfoBox :place=\"infoboxInterestingPlace\"></PlaceInfoBox>\r\n      </gmap-info-window>\r\n       <gmap-polyline v-if=\"fastestPath.length > 0\" :path=\"fastestPath\" :editable=\"false\" ref=\"polyline\">\r\n       </gmap-polyline>\r\n\r\n      <gmap-polyline v-for=\"line in polilineInterestingPathsField\" :path=\"line.path\"\r\n                     :editable=\"false\" :options='{strokeColor:line.color}' >\r\n      </gmap-polyline>\r\n    </gmap-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\nimport PlaceInfoBox from \"./PlaceInfoBox\";\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  props: [\"pointsOfInterest\", \"routes\", \"global\"],\r\n  components: {PlaceInfoBox, AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n\r\n      path:[],\r\n\r\n      infoWindowPos: null,\r\n      infoWinOpen: false,\r\n      infoOptions: {\r\n        pixelOffset: {\r\n          width: 0,\r\n          height: -35\r\n        }\r\n      },\r\n      proposedInterestingPlaces: [\"ChIJv0QRf_HMHkcRv7d7R28ht3Q\"],\r\n      infoboxInterestingPlace: null,\r\n\r\n      polilineInterestingPathsField:[]\r\n\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    var vm = this;\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map;\r\n      vm.global.map = map;\r\n      this.calculateInterestingPlaces(this.proposedInterestingPlaces)\r\n    });\r\n    this.geolocate();\r\n\r\n    this.$eventHub.$on('newRequest', response => {\r\n      console.log(\"Update!\")\r\n      vm.$forceUpdate();\r\n    });\r\n\r\n    this.$eventHub.$on('updateRoutes',  routes => {\r\n      vm.routes = routes\r\n      vm.polilineInterestingPathsField =  vm.polilineInterestingPathsFunc();\r\n    });\r\n  },\r\n\r\n  computed:{\r\n    fastestPath: function(){\r\n      var toReturn = []\r\n      if(this.routes.fastestRoute) {\r\n        var decoded = google.maps.geometry.encoding.decodePath(this.routes.fastestRoute.travelObjects[0].overview_polyline.points);\r\n        decoded.forEach(d => {\r\n          toReturn.push({lat: d.lat(), lng: d.lng()})\r\n        });\r\n      }\r\n      return toReturn;\r\n    },\r\n     polilineInterestingPaths: function () {\r\n       var toReturn = []\r\n       if(this.routes.interestingRoute){\r\n         this.routes.interestingRoute.travelObjects.forEach(c => {\r\n           var decoded = google.maps.geometry.encoding.decodePath(c.overview_polyline.points);\r\n           var thisLinePoints = [];\r\n           decoded.forEach(d => {\r\n             thisLinePoints.push({lat: d.lat(), lng: d.lng()})\r\n           });\r\n            toReturn.push({path:thisLinePoints, color: c.color})\r\n         });\r\n       }\r\n        return toReturn;\r\n     }\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    polilineInterestingPathsFunc: function () {\r\n      var toReturn = []\r\n      if(this.routes.interestingRoute){\r\n        this.routes.interestingRoute.travelObjects.forEach(c => {\r\n          var decoded = google.maps.geometry.encoding.decodePath(c.overview_polyline.points);\r\n          var thisLinePoints = [];\r\n          decoded.forEach(d => {\r\n            thisLinePoints.push({lat: d.lat(), lng: d.lng()})\r\n          });\r\n          toReturn.push({path:thisLinePoints, color: c.color})\r\n        });\r\n      }\r\n      return toReturn;\r\n    },\r\n    setStartPosition: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.setStartMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.startMarker.location\r\n      }\r\n    },\r\n    setEndPosition: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.setEndMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.endMarker.location\r\n      }\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.setStartMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() });\r\n      this.startPlaceId = null\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.setEndMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() })\r\n      this.endPlaceId = null;\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    setStartMarker: function(location){\r\n      this.startMarker.location = location;\r\n      this.$eventHub.$emit('startPositionChange', this.startMarker.location)\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endMarker.location = location;\r\n      this.$eventHub.$emit('endPositionChange', this.endMarker.location);\r\n    },\r\n\r\n    fitBounds: function(){\r\n      var b = new google.maps.LatLngBounds();\r\n      b.extend(this.startMarker.location);\r\n      b.extend(this.endMarker.location);\r\n      this.$refs.mapRef.fitBounds(b)\r\n    },\r\n\r\n       toggleInfoWindow: function(position) {\r\n        this.infoWindowPos = position;\r\n\r\n        //check if its the same marker that was selected if yes toggle\r\n        // if (this.currentMidx == idx) {\r\n        //   this.infoWinOpen = !this.infoWinOpen;\r\n        // }\r\n        //if different marker set infowindow to open and reset current marker index\r\n        // else {\r\n          this.infoWinOpen = true;\r\n        // }\r\n      },\r\n\r\n    clickedInterestingPlaceMarker: function(place){\r\n      this.infoboxInterestingPlace = place;\r\n      this.toggleInfoWindow(place.location)\r\n    },\r\n\r\n    calculateInterestingPlaces: function(interestingPlacesIds){\r\n      var map = this.mapObject;\r\n      var vm = this;\r\n      var service = new window.google.maps.places.PlacesService(map);\r\n      interestingPlacesIds.forEach(c => {\r\n        service.getDetails({\r\n          placeId: c\r\n        }, function (place, status) {\r\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n            vm.pointsOfInterest.push(\r\n                    {location:{lat:place.geometry.location.lat(), lng:place.geometry.location.lng()},\r\n                      place:place,\r\n                      isInPlan: false\r\n                    });\r\n          }\r\n        })\r\n      });\r\n    },\r\n\r\n    findPointOfInterestIcon: function(place){\r\n      if(place.isInPlan){\r\n        return \"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\";\r\n      }else{\r\n        return 'http://fxprotect.com/wp-content/uploads/2017/03/marker-blue.png'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n#VueGoogleMap{\r\n  width:100%;\r\n  height: 750px\r\n}\r\n</style>\r\n"],"sourceRoot":"src\\components"}]}