{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\thread-loader\\dist\\cjs.js!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\babel-loader\\lib\\index.js!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\GoogleMap.vue","mtime":1547753316946},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\package.json","mtime":1547754887725},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PlaceDescription from './PlaceDescription';\nimport AddressDescription from './AddressDescription';\nimport PlaceInfoBox from \"./PlaceInfoBox\";\nexport default {\n  name: 'GoogleMap',\n  components: {\n    PlaceInfoBox: PlaceInfoBox,\n    AddressDescription: AddressDescription,\n    PlaceDescription: PlaceDescription\n  },\n  data: function data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: {\n        lat: 45.508,\n        lng: -73.587\n      },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      startMarker: {\n        location: null,\n        description: null\n      },\n      endMarker: {\n        location: null,\n        description: null\n      },\n      mapObject: null,\n      startPlaceId: null,\n      endPlaceId: null,\n      path: [],\n      infoWindowPos: null,\n      infoWinOpen: false,\n      infoOptions: {\n        pixelOffset: {\n          width: 0,\n          height: -35\n        }\n      },\n      proposedInterestingPlaces: [\"ChIJv0QRf_HMHkcRv7d7R28ht3Q\"],\n      interestingPlaces: [],\n      infoboxInterestingPlace: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$refs.mapRef.$mapPromise.then(function (map) {\n      _this.mapObject = map;\n\n      _this.calculateInterestingPlaces(map, _this.proposedInterestingPlaces);\n    }), this.geolocate();\n    this.$eventHub.$on('newResponse', function (response) {\n      _this.path = [];\n      var decoded = google.maps.geometry.encoding.decodePath(response.travelObject.overview_polyline.points);\n      decoded.forEach(function (d) {\n        _this.path.push({\n          lat: d.lat(),\n          lng: d.lng()\n        });\n      });\n\n      _this.calculateInterestingPlaces(_this.proposedInterestingPlaces);\n    });\n  },\n  methods: {\n    empty: function empty() {},\n    // receives a place object via the autocomplete component\n    geolocate: function geolocate() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n    setStartPosition: function setStartPosition(location) {\n      this.startPlaceId = location.place_id;\n      this.setStartMarker({\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      });\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      } else {\n        this.center = this.startMarker.location;\n      }\n    },\n    setEndPosition: function setEndPosition(location) {\n      this.endPlaceId = location.place_id;\n      this.setEndMarker({\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      });\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      } else {\n        this.center = this.endMarker.location;\n      }\n    },\n    updateStartPosition: function updateStartPosition(location) {\n      this.setStartMarker({\n        lat: location.latLng.lat(),\n        lng: location.latLng.lng()\n      });\n      this.startPlaceId = null;\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      }\n    },\n    updateEndPosition: function updateEndPosition(location) {\n      this.setEndMarker({\n        lat: location.latLng.lat(),\n        lng: location.latLng.lng()\n      });\n      this.endPlaceId = null;\n\n      if (this.startMarker.location && this.endMarker.location) {\n        this.fitBounds();\n      }\n    },\n    setStartMarker: function setStartMarker(location) {\n      this.startMarker.location = location;\n      this.$eventHub.$emit('startPositionChange', this.startMarker.location);\n    },\n    setEndMarker: function setEndMarker(location) {\n      this.endMarker.location = location;\n      this.$eventHub.$emit('endPositionChange', this.endMarker.location);\n    },\n    fitBounds: function fitBounds() {\n      var b = new google.maps.LatLngBounds();\n      b.extend(this.startMarker.location);\n      b.extend(this.endMarker.location);\n      this.$refs.mapRef.fitBounds(b);\n    },\n    toggleInfoWindow: function toggleInfoWindow(position) {\n      this.infoWindowPos = position; //check if its the same marker that was selected if yes toggle\n      // if (this.currentMidx == idx) {\n      //   this.infoWinOpen = !this.infoWinOpen;\n      // }\n      //if different marker set infowindow to open and reset current marker index\n      // else {\n\n      this.infoWinOpen = true; // }\n    },\n    clickedInterestingPlaceMarker: function clickedInterestingPlaceMarker(place) {\n      console.log(\"AAA \" + place);\n      this.infoboxInterestingPlace = place.info;\n      this.toggleInfoWindow(place.location);\n    },\n    calculateInterestingPlaces: function calculateInterestingPlaces(map, interestingPlacesIds) {\n      var vm = this;\n      var service = new window.google.maps.places.PlacesService(map);\n      interestingPlacesIds.forEach(function (c) {\n        service.getDetails({\n          placeId: c\n        }, function (place, status) {\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            vm.interestingPlaces.push({\n              location: {\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng()\n              },\n              info: place\n            });\n          }\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"map\">\r\n    <div>\r\n      <h2>Search and add a pin</h2>\r\n      <label> Start point:\r\n        <gmap-autocomplete @place_changed=\"setStartPosition\" placeholder=\"Set start position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <label> End point:\r\n        <gmap-autocomplete @place_changed=\"setEndPosition\" aria-placeholder=\"Set end position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <br/>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"startPlaceId\" title=\"Start\"></PlaceDescription>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"endPlaceId\" title=\"End\"></PlaceDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"startMarker.location\" title=\"StartPosition\" ></AddressDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"endMarker.location\" title=\"EndPosition\" ></AddressDescription>\r\n      <div id=\"terminalMarkerDescription\">\r\n        <div id=\"startMarkerDescription\">\r\n        </div>\r\n        <div id=\"endMarkerDescription\">\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <gmap-map id=\"VueGoogleMap\" ref=\"mapRef\"\r\n      :center=\"center\"\r\n      :zoom=\"12\"\r\n      style=\"width:100%;  height: 400px;\"\r\n    >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in markers\"\r\n        :position=\"m.position\"\r\n        :clickable=\"true\"\r\n        :draggable=\"true\"\r\n        @click=\"center=m.position\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"startMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"start\"\r\n        :draggable=\"true\"\r\n        @click=\"center=startMarker.location\"\r\n        @dragend=\"updateStartPosition\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"endMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"end\"\r\n        :draggable=\"true\"\r\n        @click=\"center=endMarker.location\"\r\n        @dragend=\"updateEndPosition\"\r\n      ></gmap-marker>\r\n\r\n      <gmap-marker v-for=\"place in interestingPlaces\"\r\n                   :position=\"place.location\"\r\n                   :clickable=\"true\"\r\n                   label=\"!\"\r\n                   :draggable=\"false\"\r\n                   @click=\"clickedInterestingPlaceMarker(place)\"\r\n                   icon=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\"\r\n      ></gmap-marker>\r\n\r\n      <gmap-info-window :options=\"infoOptions\" :position=\"infoWindowPos\" :opened=\"infoWinOpen\" @closeclick=\"infoWinOpen=false\">\r\n        <PlaceInfoBox :place=\"infoboxInterestingPlace\"></PlaceInfoBox>\r\n      </gmap-info-window>\r\n       <gmap-polyline v-if=\"path.length > 0\" :path=\"path\" :editable=\"false\" ref=\"polyline\">\r\n       </gmap-polyline>\r\n    </gmap-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\nimport PlaceInfoBox from \"./PlaceInfoBox\";\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  components: {PlaceInfoBox, AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n\r\n      path:[],\r\n\r\n      infoWindowPos: null,\r\n      infoWinOpen: false,\r\n      infoOptions: {\r\n        pixelOffset: {\r\n          width: 0,\r\n          height: -35\r\n        }\r\n      },\r\n      proposedInterestingPlaces: [\"ChIJv0QRf_HMHkcRv7d7R28ht3Q\"],\r\n      interestingPlaces: [],\r\n      infoboxInterestingPlace: null\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map\r\n      this.calculateInterestingPlaces(map,this.proposedInterestingPlaces)\r\n\r\n    }),\r\n    this.geolocate();\r\n    this.$eventHub.$on('newResponse', response => {\r\n        this.path = [];\r\n        var decoded = google.maps.geometry.encoding.decodePath(response.travelObject.overview_polyline.points)\r\n        decoded.forEach(d => {\r\n          this.path.push({lat: d.lat(), lng: d.lng()})\r\n        });\r\n      this.calculateInterestingPlaces(this.proposedInterestingPlaces)\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    setStartPosition: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.setStartMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.startMarker.location\r\n      }\r\n    },\r\n    setEndPosition: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.setEndMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.endMarker.location\r\n      }\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.setStartMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() });\r\n      this.startPlaceId = null\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.setEndMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() })\r\n      this.endPlaceId = null;\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    setStartMarker: function(location){\r\n      this.startMarker.location = location;\r\n      this.$eventHub.$emit('startPositionChange', this.startMarker.location)\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endMarker.location = location;\r\n      this.$eventHub.$emit('endPositionChange', this.endMarker.location);\r\n    },\r\n\r\n    fitBounds: function(){\r\n      var b = new google.maps.LatLngBounds();\r\n      b.extend(this.startMarker.location);\r\n      b.extend(this.endMarker.location);\r\n      this.$refs.mapRef.fitBounds(b)\r\n    },\r\n\r\n       toggleInfoWindow: function(position) {\r\n        this.infoWindowPos = position;\r\n\r\n        //check if its the same marker that was selected if yes toggle\r\n        // if (this.currentMidx == idx) {\r\n        //   this.infoWinOpen = !this.infoWinOpen;\r\n        // }\r\n        //if different marker set infowindow to open and reset current marker index\r\n        // else {\r\n          this.infoWinOpen = true;\r\n        // }\r\n      },\r\n\r\n    clickedInterestingPlaceMarker: function(place){\r\n      console.log(\"AAA \"+place);\r\n      this.infoboxInterestingPlace = place.info;\r\n      this.toggleInfoWindow(place.location)\r\n    },\r\n\r\n    calculateInterestingPlaces: function(map, interestingPlacesIds){\r\n      var vm = this;\r\n      var service = new window.google.maps.places.PlacesService(map);\r\n      interestingPlacesIds.forEach(c => {\r\n        service.getDetails({\r\n          placeId: c\r\n        }, function (place, status) {\r\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n            vm.interestingPlaces.push({location:{lat:place.geometry.location.lat(), lng:place.geometry.location.lng()}, info:place});\r\n          }\r\n        })\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src\\components"}]}