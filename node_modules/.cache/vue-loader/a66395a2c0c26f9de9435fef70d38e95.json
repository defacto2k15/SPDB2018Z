{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\GoogleMap.vue","mtime":1547753316946},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\nimport PlaceInfoBox from \"./PlaceInfoBox\";\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  components: {PlaceInfoBox, AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n\r\n      path:[],\r\n\r\n      infoWindowPos: null,\r\n      infoWinOpen: false,\r\n      infoOptions: {\r\n        pixelOffset: {\r\n          width: 0,\r\n          height: -35\r\n        }\r\n      },\r\n      proposedInterestingPlaces: [\"ChIJv0QRf_HMHkcRv7d7R28ht3Q\"],\r\n      interestingPlaces: [],\r\n      infoboxInterestingPlace: null\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map\r\n      this.calculateInterestingPlaces(map,this.proposedInterestingPlaces)\r\n\r\n    }),\r\n    this.geolocate();\r\n    this.$eventHub.$on('newResponse', response => {\r\n        this.path = [];\r\n        var decoded = google.maps.geometry.encoding.decodePath(response.travelObject.overview_polyline.points)\r\n        decoded.forEach(d => {\r\n          this.path.push({lat: d.lat(), lng: d.lng()})\r\n        });\r\n      this.calculateInterestingPlaces(this.proposedInterestingPlaces)\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    setStartPosition: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.setStartMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.startMarker.location\r\n      }\r\n    },\r\n    setEndPosition: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.setEndMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.endMarker.location\r\n      }\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.setStartMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() });\r\n      this.startPlaceId = null\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.setEndMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() })\r\n      this.endPlaceId = null;\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    setStartMarker: function(location){\r\n      this.startMarker.location = location;\r\n      this.$eventHub.$emit('startPositionChange', this.startMarker.location)\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endMarker.location = location;\r\n      this.$eventHub.$emit('endPositionChange', this.endMarker.location);\r\n    },\r\n\r\n    fitBounds: function(){\r\n      var b = new google.maps.LatLngBounds();\r\n      b.extend(this.startMarker.location);\r\n      b.extend(this.endMarker.location);\r\n      this.$refs.mapRef.fitBounds(b)\r\n    },\r\n\r\n       toggleInfoWindow: function(position) {\r\n        this.infoWindowPos = position;\r\n\r\n        //check if its the same marker that was selected if yes toggle\r\n        // if (this.currentMidx == idx) {\r\n        //   this.infoWinOpen = !this.infoWinOpen;\r\n        // }\r\n        //if different marker set infowindow to open and reset current marker index\r\n        // else {\r\n          this.infoWinOpen = true;\r\n        // }\r\n      },\r\n\r\n    clickedInterestingPlaceMarker: function(place){\r\n      console.log(\"AAA \"+place);\r\n      this.infoboxInterestingPlace = place.info;\r\n      this.toggleInfoWindow(place.location)\r\n    },\r\n\r\n    calculateInterestingPlaces: function(map, interestingPlacesIds){\r\n      var vm = this;\r\n      var service = new window.google.maps.places.PlacesService(map);\r\n      interestingPlacesIds.forEach(c => {\r\n        service.getDetails({\r\n          placeId: c\r\n        }, function (place, status) {\r\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n            vm.interestingPlaces.push({location:{lat:place.geometry.location.lat(), lng:place.geometry.location.lng()}, info:place});\r\n          }\r\n        })\r\n      });\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GoogleMap.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n  <div class=\"map\">\r\n    <div>\r\n      <h2>Search and add a pin</h2>\r\n      <label> Start point:\r\n        <gmap-autocomplete @place_changed=\"setStartPosition\" placeholder=\"Set start position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <label> End point:\r\n        <gmap-autocomplete @place_changed=\"setEndPosition\" aria-placeholder=\"Set end position\">\r\n        </gmap-autocomplete>\r\n      </label>\r\n      <br/>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"startPlaceId\" title=\"Start\"></PlaceDescription>\r\n      <PlaceDescription :map=\"mapObject\" :placeid=\"endPlaceId\" title=\"End\"></PlaceDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"startMarker.location\" title=\"StartPosition\" ></AddressDescription>\r\n      <AddressDescription :map=\"mapObject\" :location=\"endMarker.location\" title=\"EndPosition\" ></AddressDescription>\r\n      <div id=\"terminalMarkerDescription\">\r\n        <div id=\"startMarkerDescription\">\r\n        </div>\r\n        <div id=\"endMarkerDescription\">\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <gmap-map id=\"VueGoogleMap\" ref=\"mapRef\"\r\n      :center=\"center\"\r\n      :zoom=\"12\"\r\n      style=\"width:100%;  height: 400px;\"\r\n    >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in markers\"\r\n        :position=\"m.position\"\r\n        :clickable=\"true\"\r\n        :draggable=\"true\"\r\n        @click=\"center=m.position\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"startMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"start\"\r\n        :draggable=\"true\"\r\n        @click=\"center=startMarker.location\"\r\n        @dragend=\"updateStartPosition\"\r\n      ></gmap-marker>\r\n      <gmap-marker\r\n        :position=\"endMarker.location\"\r\n        :clickable=\"true\"\r\n        label=\"end\"\r\n        :draggable=\"true\"\r\n        @click=\"center=endMarker.location\"\r\n        @dragend=\"updateEndPosition\"\r\n      ></gmap-marker>\r\n\r\n      <gmap-marker v-for=\"place in interestingPlaces\"\r\n                   :position=\"place.location\"\r\n                   :clickable=\"true\"\r\n                   label=\"!\"\r\n                   :draggable=\"false\"\r\n                   @click=\"clickedInterestingPlaceMarker(place)\"\r\n                   icon=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\"\r\n      ></gmap-marker>\r\n\r\n      <gmap-info-window :options=\"infoOptions\" :position=\"infoWindowPos\" :opened=\"infoWinOpen\" @closeclick=\"infoWinOpen=false\">\r\n        <PlaceInfoBox :place=\"infoboxInterestingPlace\"></PlaceInfoBox>\r\n      </gmap-info-window>\r\n       <gmap-polyline v-if=\"path.length > 0\" :path=\"path\" :editable=\"false\" ref=\"polyline\">\r\n       </gmap-polyline>\r\n    </gmap-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport PlaceDescription from './PlaceDescription'\r\nimport AddressDescription from './AddressDescription'\r\nimport PlaceInfoBox from \"./PlaceInfoBox\";\r\n\r\nexport default {\r\n  name: 'GoogleMap',\r\n  components: {PlaceInfoBox, AddressDescription, PlaceDescription },\r\n  data () {\r\n    return {\r\n      // default to Montreal to keep it simple\r\n      // change this to whatever makes sense\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null,\r\n      startMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      endMarker: {\r\n        location: null,\r\n        description: null\r\n      },\r\n      mapObject: null,\r\n      startPlaceId: null,\r\n      endPlaceId: null,\r\n\r\n      path:[],\r\n\r\n      infoWindowPos: null,\r\n      infoWinOpen: false,\r\n      infoOptions: {\r\n        pixelOffset: {\r\n          width: 0,\r\n          height: -35\r\n        }\r\n      },\r\n      proposedInterestingPlaces: [\"ChIJv0QRf_HMHkcRv7d7R28ht3Q\"],\r\n      interestingPlaces: [],\r\n      infoboxInterestingPlace: null\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.mapRef.$mapPromise.then((map) => {\r\n      this.mapObject = map\r\n      this.calculateInterestingPlaces(map,this.proposedInterestingPlaces)\r\n\r\n    }),\r\n    this.geolocate();\r\n    this.$eventHub.$on('newResponse', response => {\r\n        this.path = [];\r\n        var decoded = google.maps.geometry.encoding.decodePath(response.travelObject.overview_polyline.points)\r\n        decoded.forEach(d => {\r\n          this.path.push({lat: d.lat(), lng: d.lng()})\r\n        });\r\n      this.calculateInterestingPlaces(this.proposedInterestingPlaces)\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    empty: function () {},\r\n    // receives a place object via the autocomplete component\r\n    geolocate: function () {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n    },\r\n    setStartPosition: function (location) {\r\n      this.startPlaceId = location.place_id\r\n      this.setStartMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.startMarker.location\r\n      }\r\n    },\r\n    setEndPosition: function (location) {\r\n      this.endPlaceId = location.place_id\r\n      this.setEndMarker({\r\n        lat: location.geometry.location.lat(),\r\n        lng: location.geometry.location.lng()\r\n      });\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }else{\r\n        this.center = this.endMarker.location\r\n      }\r\n    },\r\n    updateStartPosition: function (location) {\r\n      this.setStartMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() });\r\n      this.startPlaceId = null\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    updateEndPosition: function (location) {\r\n      this.setEndMarker({ lat: location.latLng.lat(), lng: location.latLng.lng() })\r\n      this.endPlaceId = null;\r\n\r\n      if(this.startMarker.location && this.endMarker.location){\r\n        this.fitBounds();\r\n      }\r\n    },\r\n    setStartMarker: function(location){\r\n      this.startMarker.location = location;\r\n      this.$eventHub.$emit('startPositionChange', this.startMarker.location)\r\n    },\r\n    setEndMarker: function (location) {\r\n      this.endMarker.location = location;\r\n      this.$eventHub.$emit('endPositionChange', this.endMarker.location);\r\n    },\r\n\r\n    fitBounds: function(){\r\n      var b = new google.maps.LatLngBounds();\r\n      b.extend(this.startMarker.location);\r\n      b.extend(this.endMarker.location);\r\n      this.$refs.mapRef.fitBounds(b)\r\n    },\r\n\r\n       toggleInfoWindow: function(position) {\r\n        this.infoWindowPos = position;\r\n\r\n        //check if its the same marker that was selected if yes toggle\r\n        // if (this.currentMidx == idx) {\r\n        //   this.infoWinOpen = !this.infoWinOpen;\r\n        // }\r\n        //if different marker set infowindow to open and reset current marker index\r\n        // else {\r\n          this.infoWinOpen = true;\r\n        // }\r\n      },\r\n\r\n    clickedInterestingPlaceMarker: function(place){\r\n      console.log(\"AAA \"+place);\r\n      this.infoboxInterestingPlace = place.info;\r\n      this.toggleInfoWindow(place.location)\r\n    },\r\n\r\n    calculateInterestingPlaces: function(map, interestingPlacesIds){\r\n      var vm = this;\r\n      var service = new window.google.maps.places.PlacesService(map);\r\n      interestingPlacesIds.forEach(c => {\r\n        service.getDetails({\r\n          placeId: c\r\n        }, function (place, status) {\r\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n            vm.interestingPlaces.push({location:{lat:place.geometry.location.lat(), lng:place.geometry.location.lng()}, info:place});\r\n          }\r\n        })\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}