{"remainingRequest":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\QueryControls.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\src\\components\\QueryControls.vue","mtime":1547787947173},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\studiaMagisterskie\\SPDB - Przestrzenne bazy danych\\projekt\\tymApp\\SPDB2018Z\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'QueryControls',\r\n  props: [\"pointsOfInterest\", \"routes\", \"global\"],\r\n  data () {\r\n    return {\r\n      travelMode: null,\r\n      interestKeyword: null,\r\n      startPositionLocation: null,\r\n      endPositionLocation: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$eventHub.$on('startPositionChange', data => {\r\n        this.startPositionLocation = data\r\n    });\r\n    this.$eventHub.$on('endPositionChange', data => {\r\n      this.endPositionLocation = data\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    generateColor: function(i){\r\n      var colors = ['#FF0000', '#FF00FF', '#00FF00', '#0000FF', '#00FFFF', '#FF0088']\r\n      return colors[i%colors.length];\r\n    },\r\n    foo: function(vm, response, newPointsInRoute){\r\n        response.data.place_id.forEach(c => {\r\n          if(newPointsInRoute.find( q => q.place.place_id === c)){\r\n            return;\r\n          }\r\n\r\n          var service = new window.google.maps.places.PlacesService(vm.global.map);\r\n          service.getDetails({\r\n            placeId: c\r\n          }, function (place, status) {\r\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n              vm.routes.interestingPointsNearRoute.push(\r\n                      {\r\n                        location: {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},\r\n                        place: place,\r\n                        isInPlan: false,\r\n                        timeSpent: 0.5\r\n                      });\r\n            }\r\n          })\r\n        });\r\n    },\r\n    calculateTravelTime: function(route){\r\n      var sum = 0;\r\n      route.legs[0].steps.forEach(c => {\r\n        sum += c.duration.value;\r\n      });\r\n      return sum;\r\n    },\r\n    query: function () {\r\n      var waypointPointsOfInterest= [];\r\n      var newPointsInRoute = [];\r\n      this.routes.interestingPointsInRoute.forEach(c => {\r\n        if(c.isInPlan) {\r\n          waypointPointsOfInterest.push({timeToSpend: c.timeSpent*3600, place_id: c.place.place_id})\r\n          newPointsInRoute.push(c)\r\n        }\r\n      });\r\n      if(this.routes.interestingPointsNearRoute) {\r\n        this.routes.interestingPointsNearRoute.forEach(c => {\r\n          if (c.isInPlan) {\r\n            waypointPointsOfInterest.push({timeToSpend: c.timeSpent * 3600, place_id: c.place.place_id})\r\n            newPointsInRoute.push(c)\r\n          }\r\n        });\r\n      }\r\n\r\n      var getBody = {\r\n        startPosition: {lat: this.startPositionLocation.lat, lng: this.startPositionLocation.lng} ,\r\n        endPosition: {lat: this.endPositionLocation.lat, lng:this.endPositionLocation.lng},\r\n        travelMode: this.travelMode.toLowerCase(),\r\n        pointsOfInterestKeyword: this.interestKeyword\r\n      };\r\n\r\n      console.log(\"We make request!\")\r\n      var vm = this;\r\n\r\n      vm.routes.interestingPointsInRoute = [];\r\n      vm.routes.interestingPointsNearRoute = [];\r\n      axios.get('http://127.0.0.1:8080/api/messages/', {params:getBody})\r\n      // axios.get('http://127.0.0.1:8090/routes', {body:getBody})\r\n              .then(response => {\r\n                vm.routes.fastestRoute = {travelObjects:  [response.data.routes[0]],\r\n                    travelTime:this.calculateTravelTime(response.data.routes[0]) };\r\n                if(waypointPointsOfInterest.length === 0 ){\r\n                    this.foo(vm, response, newPointsInRoute)\r\n                }\r\n\r\n                vm.$eventHub.$emit('newRequest');\r\n              })\r\n              .catch(e => {\r\n                console.log(\"Error in request: \"+e);\r\n              });\r\n\r\n      if(waypointPointsOfInterest.length > 0 ) {\r\n        // getBody.waypointPointsOfInterest = waypointPointsOfInterest;\r\n\r\n        vm.routes.interestingPointsInRoute = newPointsInRoute;\r\n\r\n        var positions = [];\r\n        positions.push({lat: this.startPositionLocation.lat, lng: this.startPositionLocation.lng})\r\n        newPointsInRoute.forEach(c => {\r\n          positions.push({lat: c.place.geometry.location.lat(), lng:c.place.geometry.location.lng()})\r\n        });\r\n        positions.push({lat: this.endPositionLocation.lat, lng:this.endPositionLocation.lng})\r\n\r\n        vm.routes.interestingPointsInRoute = newPointsInRoute;\r\n\r\n        vm.routes.interestingRoute = {};\r\n        vm.routes.interestingRoute.travelObjects = [];\r\n        vm.routes.interestingRoute.travelTime = 0;\r\n        newPointsInRoute.forEach(c => {\r\n          vm.routes.interestingRoute.travelTime += c.timeSpent*3600;\r\n        });\r\n\r\n        var j = 0;\r\n        for(var i = 0; i < positions.length-1; i++) {\r\n          getBody = {\r\n            startPosition: positions[i],\r\n            endPosition: positions[i+1],\r\n            travelMode: this.travelMode.toLowerCase(),\r\n            pointsOfInterestKeyword: this.interestKeyword\r\n          };\r\n\r\n          console.log(\"RequestX: \"+i)\r\n          axios.get('http://127.0.0.1:8080/api/messages', {params: getBody})\r\n          // axios.get('http://127.0.0.1:8090/routes2', {body: getBody})\r\n                  .then(response => {\r\n                    var to = response.data.routes[0];\r\n                    to.color = vm.generateColor(j);\r\n                    vm.foo(vm, response, newPointsInRoute);\r\n                    vm.routes.interestingRoute.travelObjects.push(to);\r\n\r\n                    vm.routes.interestingRoute.travelTime += this.calculateTravelTime(response.data.routes[0]);\r\n\r\n                    vm.$eventHub.$emit('newRequest');\r\n                    vm.$eventHub.$emit('updateRoutes',vm.routes );\r\n                    j++;\r\n                  })\r\n                  .catch(e => {\r\n                    console.log(\"Error in request: \" + e);\r\n                  });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["QueryControls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"QueryControls.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n    <div>\r\n    <select v-model=\"travelMode\">\r\n      <option disabled value=null>Travel mode</option>\r\n      <option value=\"DRIVING\">Driving</option>\r\n      <option value=\"WALKING\">Walking</option>\r\n      <option value=\"BICYCLING\">Bicycling</option>\r\n      <option value=\"TRANSIT\">Transit</option>\r\n    </select>\r\n  <select v-model=\"interestKeyword\">\r\n    <option disabled value=null>What you are looking for</option>\r\n    <option> Museum</option>\r\n    <option> Restaurant</option>\r\n    <option> Shop</option>\r\n  </select>\r\n  <button v-on:click=\"query\"  :disabled=\"(travelMode==null || interestKeyword == null\r\n    || startPositionLocation == null || endPositionLocation == null) && false\" >Query</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'QueryControls',\r\n  props: [\"pointsOfInterest\", \"routes\", \"global\"],\r\n  data () {\r\n    return {\r\n      travelMode: null,\r\n      interestKeyword: null,\r\n      startPositionLocation: null,\r\n      endPositionLocation: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$eventHub.$on('startPositionChange', data => {\r\n        this.startPositionLocation = data\r\n    });\r\n    this.$eventHub.$on('endPositionChange', data => {\r\n      this.endPositionLocation = data\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    generateColor: function(i){\r\n      var colors = ['#FF0000', '#FF00FF', '#00FF00', '#0000FF', '#00FFFF', '#FF0088']\r\n      return colors[i%colors.length];\r\n    },\r\n    foo: function(vm, response, newPointsInRoute){\r\n        response.data.place_id.forEach(c => {\r\n          if(newPointsInRoute.find( q => q.place.place_id === c)){\r\n            return;\r\n          }\r\n\r\n          var service = new window.google.maps.places.PlacesService(vm.global.map);\r\n          service.getDetails({\r\n            placeId: c\r\n          }, function (place, status) {\r\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n              vm.routes.interestingPointsNearRoute.push(\r\n                      {\r\n                        location: {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},\r\n                        place: place,\r\n                        isInPlan: false,\r\n                        timeSpent: 0.5\r\n                      });\r\n            }\r\n          })\r\n        });\r\n    },\r\n    calculateTravelTime: function(route){\r\n      var sum = 0;\r\n      route.legs[0].steps.forEach(c => {\r\n        sum += c.duration.value;\r\n      });\r\n      return sum;\r\n    },\r\n    query: function () {\r\n      var waypointPointsOfInterest= [];\r\n      var newPointsInRoute = [];\r\n      this.routes.interestingPointsInRoute.forEach(c => {\r\n        if(c.isInPlan) {\r\n          waypointPointsOfInterest.push({timeToSpend: c.timeSpent*3600, place_id: c.place.place_id})\r\n          newPointsInRoute.push(c)\r\n        }\r\n      });\r\n      if(this.routes.interestingPointsNearRoute) {\r\n        this.routes.interestingPointsNearRoute.forEach(c => {\r\n          if (c.isInPlan) {\r\n            waypointPointsOfInterest.push({timeToSpend: c.timeSpent * 3600, place_id: c.place.place_id})\r\n            newPointsInRoute.push(c)\r\n          }\r\n        });\r\n      }\r\n\r\n      var getBody = {\r\n        startPosition: {lat: this.startPositionLocation.lat, lng: this.startPositionLocation.lng} ,\r\n        endPosition: {lat: this.endPositionLocation.lat, lng:this.endPositionLocation.lng},\r\n        travelMode: this.travelMode.toLowerCase(),\r\n        pointsOfInterestKeyword: this.interestKeyword\r\n      };\r\n\r\n      console.log(\"We make request!\")\r\n      var vm = this;\r\n\r\n      vm.routes.interestingPointsInRoute = [];\r\n      vm.routes.interestingPointsNearRoute = [];\r\n      axios.get('http://127.0.0.1:8080/api/messages/', {params:getBody})\r\n      // axios.get('http://127.0.0.1:8090/routes', {body:getBody})\r\n              .then(response => {\r\n                vm.routes.fastestRoute = {travelObjects:  [response.data.routes[0]],\r\n                    travelTime:this.calculateTravelTime(response.data.routes[0]) };\r\n                if(waypointPointsOfInterest.length === 0 ){\r\n                    this.foo(vm, response, newPointsInRoute)\r\n                }\r\n\r\n                vm.$eventHub.$emit('newRequest');\r\n              })\r\n              .catch(e => {\r\n                console.log(\"Error in request: \"+e);\r\n              });\r\n\r\n      if(waypointPointsOfInterest.length > 0 ) {\r\n        // getBody.waypointPointsOfInterest = waypointPointsOfInterest;\r\n\r\n        vm.routes.interestingPointsInRoute = newPointsInRoute;\r\n\r\n        var positions = [];\r\n        positions.push({lat: this.startPositionLocation.lat, lng: this.startPositionLocation.lng})\r\n        newPointsInRoute.forEach(c => {\r\n          positions.push({lat: c.place.geometry.location.lat(), lng:c.place.geometry.location.lng()})\r\n        });\r\n        positions.push({lat: this.endPositionLocation.lat, lng:this.endPositionLocation.lng})\r\n\r\n        vm.routes.interestingPointsInRoute = newPointsInRoute;\r\n\r\n        vm.routes.interestingRoute = {};\r\n        vm.routes.interestingRoute.travelObjects = [];\r\n        vm.routes.interestingRoute.travelTime = 0;\r\n        newPointsInRoute.forEach(c => {\r\n          vm.routes.interestingRoute.travelTime += c.timeSpent*3600;\r\n        });\r\n\r\n        var j = 0;\r\n        for(var i = 0; i < positions.length-1; i++) {\r\n          getBody = {\r\n            startPosition: positions[i],\r\n            endPosition: positions[i+1],\r\n            travelMode: this.travelMode.toLowerCase(),\r\n            pointsOfInterestKeyword: this.interestKeyword\r\n          };\r\n\r\n          console.log(\"RequestX: \"+i)\r\n          axios.get('http://127.0.0.1:8080/api/messages', {params: getBody})\r\n          // axios.get('http://127.0.0.1:8090/routes2', {body: getBody})\r\n                  .then(response => {\r\n                    var to = response.data.routes[0];\r\n                    to.color = vm.generateColor(j);\r\n                    vm.foo(vm, response, newPointsInRoute);\r\n                    vm.routes.interestingRoute.travelObjects.push(to);\r\n\r\n                    vm.routes.interestingRoute.travelTime += this.calculateTravelTime(response.data.routes[0]);\r\n\r\n                    vm.$eventHub.$emit('newRequest');\r\n                    vm.$eventHub.$emit('updateRoutes',vm.routes );\r\n                    j++;\r\n                  })\r\n                  .catch(e => {\r\n                    console.log(\"Error in request: \" + e);\r\n                  });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}