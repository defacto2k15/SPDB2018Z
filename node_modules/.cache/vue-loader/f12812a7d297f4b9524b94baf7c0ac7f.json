{"remainingRequest":"/home/aleksander/github/SPDB2018Z/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aleksander/github/SPDB2018Z/src/components/GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/aleksander/github/SPDB2018Z/src/components/GoogleMap.vue","mtime":1547693063510},{"path":"/home/aleksander/github/SPDB2018Z/node_modules/babel-loader/lib/index.js","mtime":1547693104938},{"path":"/home/aleksander/github/SPDB2018Z/node_modules/cache-loader/dist/cjs.js","mtime":1547693114817},{"path":"/home/aleksander/github/SPDB2018Z/node_modules/vue-loader/lib/index.js","mtime":1547693117285}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport PlaceDescription from './PlaceDescription'\nimport AddressDescription from './AddressDescription'\n\nexport default {\n  name: 'GoogleMap',\n  components: { AddressDescription, PlaceDescription },\n  data () {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: { lat: 45.508, lng: -73.587 },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      startMarker: {\n        location: null,\n        description: null\n      },\n      endMarker: {\n        location: null,\n        description: null\n      },\n      mapObject: null,\n      startPlaceId: null,\n      endPlaceId: null,\n    }\n  },\n\n  mounted () {\n    this.$refs.mapRef.$mapPromise.then((map) => {\n      this.mapObject = map\n    })\n    this.geolocate()\n  },\n\n  methods: {\n    empty: function () {},\n    // receives a place object via the autocomplete component\n    setPlace (place) {\n      this.currentPlace = place\n    },\n    addMarker () {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        }\n        this.markers.push({ position: marker })\n        this.places.push(this.currentPlace)\n        this.center = marker\n        this.currentPlace = null\n      }\n    },\n    geolocate: function () {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      })\n    },\n    setStartMarker: function (location) {\n      this.startPlaceId = location.place_id\n      this.startMarker.location = {\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      }\n      this.center = this.startMarker.location\n    },\n    setEndMarker: function (location) {\n      this.endPlaceId = location.place_id\n      this.endMarker.location = {\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      }\n      this.center = this.endMarker.location\n    },\n    updateStartPosition: function (location) {\n      this.startMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\n      this.startPlaceId = null\n    },\n    updateEndPosition: function (location) {\n      this.endMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\n      this.endPlaceId = null\n    },\n    onResults (results) {\n      alert(results)\n      if (results) {\n        this.placeLocation = results.geometry.location\n      }\n    }\n  }\n}\n",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GoogleMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"map\">\n    <div>\n      <h2>Search and add a pin</h2>\n      <label> Start point:\n        <gmap-autocomplete @place_changed=\"setStartMarker\" placeholder=\"Set start position\">\n        </gmap-autocomplete>\n      </label>\n      <label> End point:\n        <gmap-autocomplete @place_changed=\"setEndMarker\" aria-placeholder=\"Set end position\">\n        </gmap-autocomplete>\n      </label>\n      <br/>\n      <PlaceDescription :map=\"mapObject\" :placeid=\"startPlaceId\" title=\"Start\"></PlaceDescription>\n      <PlaceDescription :map=\"mapObject\" :placeid=\"endPlaceId\" title=\"End\"></PlaceDescription>\n      <AddressDescription :map=\"mapObject\" :location=\"startMarker.location\" title=\"StartPosition\" ></AddressDescription>\n      <AddressDescription :map=\"mapObject\" :location=\"endMarker.location\" title=\"EndPosition\" ></AddressDescription>\n      <div id=\"terminalMarkerDescription\">\n        <div id=\"startMarkerDescription\">\n\n        </div>\n        <div id=\"endMarkerDescription\">\n\n        </div>\n\n      </div>\n\n    </div>\n    <br>\n    <gmap-map id=\"VueGoogleMap\" ref=\"mapRef\"\n      :center=\"center\"\n      :zoom=\"12\"\n      style=\"width:100%;  height: 400px;\"\n    >\n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        :clickable=\"true\"\n        :draggable=\"true\"\n        @click=\"center=m.position\"\n      ></gmap-marker>\n      <gmap-marker\n        :position=\"startMarker.location\"\n        :clickable=\"true\"\n        label=\"start\"\n        :draggable=\"true\"\n        @click=\"center=startMarker.location\"\n        @dragend=\"updateStartPosition\"\n      ></gmap-marker>\n      <gmap-marker\n        :position=\"endMarker.location\"\n        :clickable=\"true\"\n        label=\"end\"\n        :draggable=\"true\"\n        @click=\"center=endMarker.location\"\n        @dragend=\"updateEndPosition\"\n      ></gmap-marker>\n    </gmap-map>\n  </div>\n</template>\n\n<script>\n\nimport PlaceDescription from './PlaceDescription'\nimport AddressDescription from './AddressDescription'\n\nexport default {\n  name: 'GoogleMap',\n  components: { AddressDescription, PlaceDescription },\n  data () {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: { lat: 45.508, lng: -73.587 },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      startMarker: {\n        location: null,\n        description: null\n      },\n      endMarker: {\n        location: null,\n        description: null\n      },\n      mapObject: null,\n      startPlaceId: null,\n      endPlaceId: null,\n    }\n  },\n\n  mounted () {\n    this.$refs.mapRef.$mapPromise.then((map) => {\n      this.mapObject = map\n    })\n    this.geolocate()\n  },\n\n  methods: {\n    empty: function () {},\n    // receives a place object via the autocomplete component\n    setPlace (place) {\n      this.currentPlace = place\n    },\n    addMarker () {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        }\n        this.markers.push({ position: marker })\n        this.places.push(this.currentPlace)\n        this.center = marker\n        this.currentPlace = null\n      }\n    },\n    geolocate: function () {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      })\n    },\n    setStartMarker: function (location) {\n      this.startPlaceId = location.place_id\n      this.startMarker.location = {\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      }\n      this.center = this.startMarker.location\n    },\n    setEndMarker: function (location) {\n      this.endPlaceId = location.place_id\n      this.endMarker.location = {\n        lat: location.geometry.location.lat(),\n        lng: location.geometry.location.lng()\n      }\n      this.center = this.endMarker.location\n    },\n    updateStartPosition: function (location) {\n      this.startMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\n      this.startPlaceId = null\n    },\n    updateEndPosition: function (location) {\n      this.endMarker.location = { lat: location.latLng.lat(), lng: location.latLng.lng() }\n      this.endPlaceId = null\n    },\n    onResults (results) {\n      alert(results)\n      if (results) {\n        this.placeLocation = results.geometry.location\n      }\n    }\n  }\n}\n</script>\n"]}]}